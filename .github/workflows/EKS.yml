name: kubernetes

on:
  workflow_call:

jobs:

  EKS:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    # implantando o aws cli
    - name: configurando credenciais da AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ID_CHAVE_ACESSO }}
        aws-secret-access-key: ${{ secrets.CHAVE_SECRETA }}
        aws-region: us-east-2

    # iniciando o terraform
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      
    - run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog init

    # interrompendo a execucao do container
    # - run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog destroy -auto-approve
    # - run: return 1

    # subindo a infra
    - run: terraform -chdir=Infra_CI_Kubernetes/env/Homolog apply -auto-approve
    
    # recuperando o ip do host do banco de dados que criamos na infra
    - run: echo "$(terraform -chdir=Infra_CI_Kubernetes/env/Homolog output -raw IP_db)"
    id: URL

    # instalando o kubectl para interagir com o kubernetes
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3
    
    # configurando o kubeconfig
    # https://docs.aws.amazon.com/pt_br/eks/latest/userguide/create-kubeconfig.html
    - run: aws sts get-caller-identity
    
    # criando o arquivo kubeconfig
    # conferir na infra Provider.tf
    # a info do name esta dentro de Infra_CI_Kubernetes/Homolog/Main.tf
    - run: aws eks update-kubeconfig --region us-west-2 --name homolog2
    
    # identificando se o servico foi criado no kubernetes do EKS
    - run: kubectl get svc

    # configurando e criando os secrets
    # - run: kubectl create secret generic dbhost --from-literal=HOST=${{ secrets.DBHOST }}
    - run: kubectl delete secret dbhost --ignore-not-found
    - run: kubectl create secret generic dbhost --from-literal=HOST=${{ steps.URL.outputs.stdout }}

    - run: kubectl delete secret dbport --ignore-not-found
    - run: kubectl create secret generic dbport --from-literal=DBPORT=${{secrets.DBPORT}}

    - run: kubectl delete secret dbuser --ignore-not-found
    - run: kubectl create secret generic dbuser --from-literal=USER=${{secrets.DBUSER}}

    - run: kubectl delete secret dbpassword --ignore-not-found
    - run: kubectl create secret generic dbpassword --from-literal=PASSWORD=${{secrets.DBPASSWORD}}

    - run: kubectl delete secret dbname --ignore-not-found
    - run: kubectl create secret generic dbname --from-literal=DBNAME=${{secrets.DBNAME}}

    - run: kubectl delete secret port --ignore-not-found
    - run: kubectl create secret generic port --from-literal=PORT=8000
    
    # criando a aplicacao no kubernetes atraves do manifesto
    - run: kubectl apply -f ./Infra_CI_Kubernetes/go.yaml
    
    # corrigindo para seja executada a imagem correta do docker
    - run: kubectl set image deployment/go-api go=leonardosartorello/go_ci:${{github.run_number}}




    
